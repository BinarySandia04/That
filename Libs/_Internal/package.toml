[_info]
_name = "_internal"
_import_name = "_internal"
_display_name = "Internal library"
_version = "0.1v"
_root = ""

[_types.Int]
parent = "int"
upgrades_to = "Num"
templates = 0

[_types.Str]
parent = "std::string"
include = ["string"]
templates = 0
[_types.Str.accessor.Int]
return = "Chr"
[_types.Str.methods.size]
_function = {bind = "size", args = [], return = "Int", headers = []}

[_types.Chr]
parent = "char"
upgrades_to = "Int"

[_types.Bul]
parent = "bool"
upgrades_to = "Int"
templates = 0

[_types.Num]
parent = "double"
templates = 0
inherited_operators = ["+", "-", "*", "/"]

[_types.Nil]
parent = "void"
templates = 0

[_types.Arr]
parent = "std::vector"
include = ["vector"]
templates = 1 
[_types.Arr.methods.push]
_function = {bind = "push_back", args = ["$1"], return = "Nil", headers = []}
[_types.Arr.methods.pop]
_function = {bind = "pop_back",  args = [],     return = "Nil", headers = []}
[_types.Arr.methods.size]
_function = {bind = "size", args = [], return = "Int", headers = []}

[_types.Any]
parent = "std::any"
include = ["any"]

# [_._conversions]
# Implicit conversions
# int_to_bul = {implicit = true, from = "Int", to = "Bul"}
# num_to_bul = {implicit = true, from = "Num", to = "Bul"}
# int_to_num = {implicit = true, from = "Int", to = "Num"}

# Explicit conversion
# int_to_str = {bind = "IntToString", from = "Int", to = "Str"}
# num_to_str = {bind = "NumToString", from = "Num", to = "Str"}

[_operations]
str_plus_int = {bind = "_internal::StrPlusInt", ltype = "Str", rtype = "Int", op = "+", return = "Str", headers = ["operations.h"]}
int_plus_str = {bind = "_internal::IntPlusStr", ltype = "Int", rtype = "Str", op = "+", return = "Str", headers = ["operations.h"]}
str_plus_num = {bind = "_internal::StrPlusNum", ltype = "Str", rtype = "Num", op = "+", return = "Str", headers = ["operations.h"]}
num_plus_str = {bind = "_internal::NumPlusStr", ltype = "Num", rtype = "Str", op = "+", return = "Str", headers = ["operations.h"]}
